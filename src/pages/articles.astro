---
import MainLayout from '../layouts/MainLayout.astro';
import { getCollection, getEntry } from 'astro:content';
import Icon from '../components/ui/Icons.astro'
import Button from '../components/ui/Button.astro';
import Input from '../components/ui/Input.astro';
import { ScienceList } from '../components/Science';
import { calcReadTime } from '../components/readTime';
import { clientTranslations } from '../i18n';
const lang = Astro.locals.lang;
const t = clientTranslations[lang];

// Get all articles
const articles = (await getCollection('articles')).filter(({slug}) => slug.split('/')[0] === lang);
articles.sort((a, b) => b.data.date.getTime() - a.data.date.getTime());
const authors = await getCollection('authors');
let articlesData = []
articles.map(({data, slug, body}) => {
    let auths = []
    if (data.authors) data.authors.map((author) => {auths.push([authors.filter(({id}) => id==author.id)[0].data, author.id])}); else auths=undefined;
    articlesData.push({
        title: data.title,
        author: [authors.filter(({id}) => id == data.author.id)[0].data, data.author.id],
		authors: auths,
        description: data.description,
		tags: data.tags,
		references: data.references,
        altImage: data.altImage,
        date: data.date,
        dateName: data.date.toLocaleDateString(t.articles.timeStamp, { year: 'numeric', month: 'long', day: 'numeric' }),
        science: ScienceList.filter(({id}) => id == slug.split('/')[1])[0],
        readTime: calcReadTime(body),
        id: slug.split('/')[2],
		slug: slug,
    })
})
---

<MainLayout title={t.titles.articles}>
    <div class="relative">
        <div class="absolute inset-0 blue-pattern opacity-20"></div>
        
        <!-- Page Header -->
        <header class="container px-4 py-8 md:py-10 relative z-10">
            <h1 class="text-3xl md:text-4xl font-bold tracking-tight mb-4">
                {t.articles.title}
            </h1>
            <p class="text-xl text-muted-foreground max-w-4xl mb-8">
                {t.articles.subtitle}
                <span id="page-indicator" class="font-light"></span>
            </p>
            
            <!-- Search and Filter -->
            <div class="flex flex-col md:flex-row gap-4">
                <div class="relative flex-1">
                    <Icon icon="search" className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                    <Input 
                        type="search" 
                        id="search-input"
                        placeholder="Busca artículos por título, autor, etiquetas..." 
                        className="pl-10 w-full"
                    />
                </div>
                <div class="flex gap-2">
                    <select 
                        id="science-filter"
                        class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:w-[200px]"
                    >
                            <option value="">{t.sciences.all}</option>
                        {ScienceList.map(science => (
                            <option value={science.id}>{t.sciences[science.name]}</option>
                        ))}
                    </select>
                    <Button variant="outline" id="filter-button" className="btn-hover-effect">
                        <Icon icon="filter" className="mr-2 h-4 w-4" />
                        {t.articles.filter}
                    </Button>
                    <Button variant="outline" id="tags-filter" className="btn-hover-effect hidden">
                        <Icon icon="searchx" className="mr-2 min-w-4 h-4 w-4" />
                        <p class="max-md:hidden">{t.articles.removeTags}</p><p class="md:hidden">{t.articles.tags}</p>
                    </Button>
                </div>
            </div>
        </header>
        
        <!-- Articles Grid -->
        <div class="container px-4 pb-16 relative z-10">
            <div id="articles-grid" class="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3">
                <!-- Articles will be inserted here by JavaScript -->
            </div>
            
            <!-- No articles message -->
            <div id="no-articles-message" class="text-center py-12 hidden">
                <p class="text-muted-foreground">No articles found. Try adjusting your filters.</p>
            </div>
            
            <!-- Pagination -->
            <div id="pagination-container" class="flex justify-center mt-12">
                <nav class="flex items-center gap-1" aria-label="Pagination" id="pagination-nav">
                    <!-- Pagination will be inserted here by JavaScript -->
                </nav>
            </div>
            
            <!-- Current page indicator -->
            <div id="page-info" class="text-center mt-4 text-sm text-muted-foreground"></div>
        </div>
    </div>
</MainLayout>

<script define:vars={{articlesData, t}}>
    document.addEventListener('DOMContentLoaded', () => {
        // Pagination settings
        const articlesPerPage = 12;
        let currentPage = 1;
        let filteredArticles = [...articlesData];

        // Parse URL parameters on page load
        function parseURLParams() {
            const urlParams = new URLSearchParams(window.location.search);
            const pageParam = urlParams.get('page');
            if (pageParam) {
                currentPage = parseInt(pageParam) || 1;
            }
            
            const scienceParam = urlParams.get('science');
            if (scienceParam) {
                document.getElementById('science-filter').value = scienceParam;
                filteredArticles = articlesData.filter(article => 
                    article.science.id.toLowerCase() === scienceParam.toLowerCase()
                );
            }
            
            const searchParam = urlParams.get('search');
            if (searchParam) {
                document.getElementById('search-input').value = searchParam;
                filterArticlesBySearch(searchParam);
            }

            const tagParam = urlParams.get('tags');
            if (tagParam) {
                document.getElementById('tags-filter').classList.remove('hidden');
                filteredArticles = articlesData.filter(article => 
                    article.tags !== undefined ? article.tags.filter(tag => tag.toLowerCase().replace(/\s+/g, '-') === tagParam.toLowerCase()).length > 0 : false
                );
            } else {
                document.getElementById('tags-filter').classList.toString().includes('hidden') ? document.getElementById('tags-filter').classList.add('hidden') : null;
            }
        }

        // Filter articles by search term
        function filterArticlesBySearch(searchTerm) {
            if (!searchTerm) {
                return;
            }
            
            const term = searchTerm.toLowerCase().replace(/[\u0300-\u036f]/g, "");
            let filteredArticlesByTerm = filteredArticles.filter(article => {
                const title = article.title.toLowerCase().normalize("NFKD").replace(/[\u0300-\u036f]/g, "");
                const description = article.description.toLowerCase().normalize("NFKD").replace(/[\u0300-\u036f]/g, "");
                const science = article.science.name.toLowerCase().normalize("NFKD").replace(/[\u0300-\u036f]/g, "");
                const authors = article.authors !== undefined ? 
                    article.authors.map(a => a[0].name.toLowerCase()).join(' ').normalize("NFKD").replace(/[\u0300-\u036f]/g, "") : 
                    (article.author[0] !== undefined ? article.author[0].name.toLowerCase().normalize("NFKD").replace(/[\u0300-\u036f]/g, "") : '');
                const tags = article.tags !== undefined ?
                    article.tags.map(tag => tag.toLowerCase()).join(' ').normalize("NFKD").replace(/[\u0300-\u036f]/g, "") : '';
                return title.includes(term) || 
                    description.includes(term) || 
                    science.includes(term) || 
                    authors.includes(term) ||
                    tags.includes(term);
            });
            
            term.split(' ').forEach((word) => {
                let filteredArticlesByWord = filteredArticles.filter(article => {
                    const title = article.title.toLowerCase().normalize("NFKD").replace(/[\u0300-\u036f]/g, "");
                    const description = article.description.toLowerCase().normalize("NFKD").replace(/[\u0300-\u036f]/g, "");
                    const science = article.science.name.toLowerCase().normalize("NFKD").replace(/[\u0300-\u036f]/g, "");
                    const authors = article.authors !== undefined ? 
                        article.authors.map(a => a[0].name.toLowerCase()).join(' ').normalize("NFKD").replace(/[\u0300-\u036f]/g, "") : 
                        (article.author[0] !== undefined ? article.author[0].name.toLowerCase().normalize("NFKD").replace(/[\u0300-\u036f]/g, "") : '');
                    const tags = article.tags !== undefined ?
                        article.tags.map(tag => tag.toLowerCase()).join(' ').normalize("NFKD").replace(/[\u0300-\u036f]/g, "") : '';
                    return title.includes(word) || 
                        description.includes(word) || 
                        science.includes(word) || 
                        authors.includes(word) ||
                        tags.includes(word);
                });
                filteredArticlesByWord.forEach((article) => {
                    if (!filteredArticlesByTerm.includes(article)) {
                        filteredArticlesByTerm.push(article);
                    }
                });
            });

            filteredArticles = filteredArticlesByTerm;
        }

        // Generate pagination buttons
        function generatePagination() {
            const totalPages = Math.max(1, Math.ceil(filteredArticles.length / articlesPerPage));
            
            // Validate current page
            currentPage = Math.max(1, Math.min(currentPage, totalPages));
            
            const paginationNav = document.getElementById('pagination-nav');
            paginationNav.innerHTML = '';
            
            // Previous button
            const prevButton = document.createElement('a');
            prevButton.href = `?page=${currentPage - 1}`;
            prevButton.className = `inline-flex items-center justify-center rounded-md text-sm font-medium h-10 w-10 border ${
                currentPage > 1 ? 'border-input bg-background hover:bg-accent transition-colors' : 'border-input bg-background opacity-50 cursor-not-allowed'
            }`;
            prevButton.setAttribute('aria-disabled', currentPage <= 1);
            prevButton.setAttribute('tabindex', currentPage <= 1 ? -1 : 0);
            prevButton.setAttribute('aria-label', 'Go to previous page');
            prevButton.innerHTML = '<span class="sr-only">Previous Page</span><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left"><path d="m15 18-6-6 6-6"/></svg>';
            paginationNav.appendChild(prevButton);
            
            // Generate page numbers with delta
            const delta = 1; // Pages to show before and after current page
            const pages = [];
            
            // Always include first page
            pages.push(1);
            
            // Calculate range around current page
            const rangeStart = Math.max(2, currentPage - delta);
            const rangeEnd = Math.min(totalPages - 1, currentPage + delta);
            
            // Add ellipsis if there's a gap after page 1
            if (rangeStart > 2) {
                pages.push('ellipsis');
            }
            
            // Add pages in range
            for (let i = rangeStart; i <= rangeEnd; i++) {
                pages.push(i);
            }
            
            // Add ellipsis if there's a gap before last page
            if (rangeEnd < totalPages - 1 && totalPages > 2) {
                pages.push('ellipsis');
            }
            
            // Always include last page if it's not the first page
            if (totalPages > 1) {
                pages.push(totalPages);
            }
            
            // Add page buttons
            pages.forEach(page => {
                if (page === 'ellipsis') {
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'inline-flex items-center justify-center rounded-md text-sm font-medium h-10 px-2 border border-input bg-background';
                    ellipsis.textContent = '...';
                    paginationNav.appendChild(ellipsis);
                } else {
                    const pageButton = document.createElement('a');
                    pageButton.href = `?page=${page}`;
                    pageButton.className = `inline-flex items-center justify-center rounded-md text-sm font-medium h-10 w-10 ${
                        currentPage === page ? 'bg-primary text-primary-foreground' : 'border border-input bg-background hover:bg-accent transition-colors'
                    }`;
                    if (currentPage === page) {
                        pageButton.setAttribute('aria-current', 'page');
                    }
                    pageButton.setAttribute('aria-label', `Go to page ${page}`);
                    pageButton.textContent = page;
                    paginationNav.appendChild(pageButton);
                }
            });
            
            // Next button
            const nextButton = document.createElement('a');
            nextButton.href = `?page=${currentPage + 1}`;
            nextButton.className = `inline-flex items-center justify-center rounded-md text-sm font-medium h-10 w-10 border ${
                currentPage < totalPages ? 'border-input bg-background hover:bg-accent transition-colors' : 'border-input bg-background opacity-50 cursor-not-allowed'
            }`;
            nextButton.setAttribute('aria-disabled', currentPage >= totalPages);
            nextButton.setAttribute('tabindex', currentPage >= totalPages ? -1 : 0);
            nextButton.setAttribute('aria-label', 'Go to next page');
            nextButton.innerHTML = '<span class="sr-only">Next Page</span><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-right"><path d="m9 18 6-6-6-6"/></svg>';
            paginationNav.appendChild(nextButton);
            
            // Update page info
            document.getElementById('page-info').textContent = `${t.articles.page} ${currentPage} ${t.articles.of} ${totalPages}`;
            document.getElementById('page-indicator').textContent = ` - ${t.articles.page} ${currentPage}`;
            
            // Show/hide pagination container
            const paginationContainer = document.getElementById('pagination-container');
            paginationContainer.classList.toggle('hidden', totalPages <= 1);
            
            // Add click events to pagination links
            document.querySelectorAll('#pagination-nav a').forEach(link => {
                link.addEventListener('click', handlePaginationClick);
            });
        }

        // Handle pagination click
        function handlePaginationClick(e) {
            // Don't navigate if disabled
            if (this.getAttribute('aria-disabled') === 'true') {
                e.preventDefault();
                return;
            }
            
            e.preventDefault();
            
            // Extract page number from href
            const href = this.getAttribute('href');
            const pageMatch = href.match(/\?page=(\d+)/);
            if (pageMatch) {
                currentPage = parseInt(pageMatch[1]);
                
                // Update URL without reloading page
                const url = new URL(window.location);
                url.searchParams.set('page', currentPage);
                window.history.pushState({}, '', url);
                
                // Update displayed articles
                displayArticles();
            }
        }

        // Create article card
        function createArticleCard(article) {
            const authorInfo = article.authors 
                ? { authors: article.authors }
                : { author: article.author?.name };
                
            // Create article card HTML
            const card = document.createElement('div');
            card.className = 'overflow-hidden rounded-lg shadow-md dark:shadow-[#151515] bg-card text-card-foreground h-full flex flex-col transform hover:translate-y-[-5px] transition-all duration-300 hover:shadow-xl';

            card.innerHTML = `
                <div class="h-48 w-full relative overflow-hidden">
                    <a href="/article/${article.slug.split('/')[2]}"><img
                        src="${"/images/contenido/" + article.id + "/portada.webp" || "/placeholder.svg"}"
                        alt="${article.title}"
                        width="400"
                        height="225"
                        class="h-full w-full object-cover transition-transform hover:scale-105 duration-700"
                    /></a>
                    <div class="absolute top-2 left-2">
                        <span class="text-primary-foreground px-2 py-1 text-xs font-medium rounded-full shadow-md bg-color-${article.science.color}">
                            ${t.sciences[article.science.name]}
                        </span>
                    </div>
                </div>
                <div class="p-6 flex-1 flex flex-col">
                    <div class="mb-2">
                        <a href="/article/${article.slug.split('/')[2]}" class="hover:text-primary transition-colors">
                            <h4 class="text-xl font-semibold line-clamp-2 group-hover:text-primary">
                                ${article.title}
                            </h4>
                        </a>
                        <div class="flex items-center gap-2 text-sm text-muted-foreground mt-1">
                            <span>${article.dateName}</span>
                            <span>•</span>
                            <span>${article.readTime} ${t.articles.readTime}</span>
                        </div>
                    </div>
                    <p class="line-clamp-3 text-muted-foreground mb-4 flex-1">${article.description}</p>
                    <div class="flex justify-between items-center mt-auto">
                        <div class="flex items-center">
                            <img alt="Foto de perfil de ${article.author[0].name}" src="/images/autores/${article.author[1]}.webp" class="bg-principal-white h-6 w-6 rounded-full object-contain my-auto mr-2">
                            <div class="text-sm font-medium">
                                ${article.authors && article.authors.length > 0
                                    ? article.authors[0].name + (article.authors.length > 1 ? ` +${article.authors.length - 1}` : '')
                                    : article.author[0]?.name || 'Unknown Author'}
                            </div>
                        </div>
                        <a href="/article/${article.slug.split('/')[2]}">
                            <button class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-9 rounded-md px-3 hover:scale-105 transition-transform">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2 h-4 w-4"><path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/><path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/></svg>
                                ${t.common.readArticle}
                            </button>
                        </a>
                    </div>
                </div>
            `;
            
            return card;
        }

        // Display articles for current page
        function displayArticles() {
            const articlesGrid = document.getElementById('articles-grid');
            const noArticlesMessage = document.getElementById('no-articles-message');
            
            // Clear current articles
            articlesGrid.innerHTML = '';
            
            // Check if there are any articles
            if (filteredArticles.length === 0) {
                noArticlesMessage.classList.remove('hidden');
                document.getElementById('pagination-container').classList.add('hidden');
                document.getElementById('page-info').textContent = '';
                return;
            }
            
            // Hide no articles message
            noArticlesMessage.classList.add('hidden');
            
            // Calculate start and end indices
            const startIndex = (currentPage - 1) * articlesPerPage;
            const endIndex = Math.min(startIndex + articlesPerPage, filteredArticles.length);
            
            // Get articles for current page
            const paginatedArticles = filteredArticles.slice(startIndex, endIndex);
            
            // Create article cards
            paginatedArticles.forEach(article => {
                const card = createArticleCard(article);
                articlesGrid.appendChild(card);
            });
            
            // Update pagination
            generatePagination();
        }

        // Apply filters and search
        function applyFilters() {
            // Reset filtered articles
            filteredArticles = [...articlesData];
            
            // Apply science filter
            const scienceFilter = document.getElementById('science-filter').value;
            if (scienceFilter) {
                filteredArticles = filteredArticles.filter(article => 
                    article.science.id.toLowerCase() === scienceFilter.toLowerCase()
                );
            }
            
            // Apply search filter
            const searchInput = document.getElementById('search-input').value;
            if (searchInput) {
                filterArticlesBySearch(searchInput);
            }
            
            // Reset to first page when filters change
            currentPage = 1;
            
            // Update URL
            const url = new URL(window.location);
            url.searchParams.set('page', currentPage);
            if (scienceFilter) {
                url.searchParams.set('science', scienceFilter);
            } else {
                url.searchParams.delete('science');
            }
            if (searchInput) {
                url.searchParams.set('search', searchInput);
            } else {
                url.searchParams.delete('search');
            }
            window.history.pushState({}, '', url);
            
            // Display updated articles
            displayArticles();
        }

        // Event listeners for filters
        document.getElementById('filter-button').addEventListener('click', applyFilters);
        document.getElementById('science-filter').addEventListener('change', applyFilters);
        
        // Search on Enter key
        document.getElementById('search-input').addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                applyFilters();
            }
        });

        document.getElementById('tags-filter').addEventListener('click', (e) => {
            const url = new URL(window.location);
            url.searchParams.delete('tags');
            window.history.pushState({}, '', url);
            document.getElementById('tags-filter').style.display = 'none';
            applyFilters();
        });

        // Initialize page
        parseURLParams();
        displayArticles();
        
        // Handle browser navigation
        window.addEventListener('popstate', () => {
            parseURLParams();
            displayArticles();
        });
    });
</script>