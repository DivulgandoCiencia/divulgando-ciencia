---
import Header from "@/components/Header.astro"
import Menu from "@/components/Menu.astro"
import Footer from "@/components/Footer.astro"
import '../styles/global.css';
import Manifest from '../json/manifest.astro';

const cookieTheme = Astro.locals.theme;
---
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Divulgando Ciencia</title>
        <link rel="icon" type="image/svg+xml" href="/images/logo.webp" />
        <Manifest/>
        <script>
            const manifest = JSON.parse(document.getElementById("manifest").textContent)
            const isValidPage = (page) => manifest.pages.slugs.includes(page) || manifest.articles.slugs.includes(page.split('/')[0]);
            const loadPage = async (page) => {
                page = page.split('?')[0].split('#')[0];
                let dynContent = {};
                if (!isValidPage(page)) page = "404";
                if (manifest.articles.slugs.includes(page.split('/')[0])) {
                    dynContent = await loadDynContent(page);
                    page = Object.keys(dynContent).length === 0 ? "404" : "article"
                };
                const storaged = localStorage.getItem(`page-${page}`);
                if (storaged) return storaged;
                const response = await fetch(`/page/${page}`);
                let text = await response.text();
                if (response.ok) localStorage.setItem(`page-${page}`, text);
                if (manifest.pages.data[page].type === "dynamic") {
                    dynContent = await loadDynContent("article/" + page.split('/')[1]);
                    text = renderDynContent(text, dynContent);
                }
                if (manifest.articles.slugs.includes(page.split('/')[0]) && Object.keys(dynContent).length === 0) {
                    text = renderDynContent(text, dynContent);
                }
                return text;
            }
            const loadDynContent = async (page) => {
                const response = await fetch(`/api/content/${page}`);
                if (!response.ok) return {};
                try {return await response.json();} 
                catch (error) {return {};}
            }
            const renderDynContent = (template, data) => {
                return template.replace(/\[\[(\w+)\]\]/g, (_, tag) => {
                    return data[tag] ?? `{{${tag}}}`;
                });
            }
            document.addEventListener("click", async (e) => {
                const link = e.target.closest("a");
                if (!link || link.origin !== location.origin) return;
                e.preventDefault();
                if (link.href == location.href) return;
                const page = link.pathname.slice(1) || "home";
                const response = await loadPage(page);
                document.querySelector("main").innerHTML = response;
                window.history.pushState({}, "", link.href);
                document.title = link.textContent + "| Divulgando Ciencia";
            });
            window.addEventListener("popstate", async() => {
                const page = location.pathname.slice(1) || "home";
                const response = await loadPage(page);
                document.querySelector("main").innerHTML = response;
                document.title = page + "| Divulgando Ciencia";
            });
            document.querySelector("main").innerHTML = await loadPage(location.pathname.slice(1) || "home");
            window.history.replaceState({}, "", location.href);
        </script>
        <script is:inline define:vars={{cookieTheme}}>
            const setTheme = () => {
                const THEME_KEY = "theme";
                const DARK_CLASS = "dark";
                const LIGHT_CLASS = "light";
                const getThemePreference = () => {
                    if (cookieTheme !== '') { return cookieTheme; }
                    if (typeof localStorage !== "undefined") { return localStorage.getItem(THEME_KEY); }
                    return window.matchMedia("(prefers-color-scheme: dark)").matches ? DARK_CLASS : LIGHT_CLASS; };
                const isDark = getThemePreference() === DARK_CLASS;
                document.documentElement.classList[isDark ? "add" : "remove"](DARK_CLASS);
                if (typeof localStorage !== "undefined") {
                    // Watch the document element and persist user preference when it changes.
                    const observer = new MutationObserver(() => {
                        const isDark = document.documentElement.classList.contains(DARK_CLASS);
                        localStorage.setItem(THEME_KEY, isDark ? DARK_CLASS : LIGHT_CLASS);
                    });
                    observer.observe(document.documentElement, {
                        attributes: true,
                        attributeFilter: ["class"],
                    });
                }
            };
            document.addEventListener("astro:after-swap", setTheme);
            setTheme();
        </script>
    </head>
    <body class="flex min-h-screen flex-col relative">
        <Menu />
        <div class={"fixed top-0 left-0 inset-0 science-pattern -z-10 "}></div>
        <Header />
        <main class="flex-1">
            
        </main>
        <Footer />
    </body>
</html>